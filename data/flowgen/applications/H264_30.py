import AppComposer

# Make Application
H264 = AppComposer.Application(AppName = "H264_30")

# Make Threads
VideoIn = AppComposer.Thread(ThreadName = "VideoIn")
YUVGenerator = AppComposer.Thread(ThreadName = "YUVGenerator")
ChromaResampler = AppComposer.Thread(ThreadName = "ChromaResampler")
MVPadding = AppComposer.Thread(ThreadName = "MVPadding")
MotionEstimation = AppComposer.Thread(ThreadName = "MotionEstimation")
MotionCompensation = AppComposer.Thread(ThreadName = "MotionCompensation")
EntropyEncoder = AppComposer.Thread(ThreadName = "EntropyEncoder")
DCT = AppComposer.Thread(ThreadName = "DCT")
SampleHold = AppComposer.Thread(ThreadName = "SampleHold")
StreamOut = AppComposer.Thread(ThreadName = "StreamOut")
Quantization = AppComposer.Thread(ThreadName = "Quantization")
DeblockingFilter = AppComposer.Thread(ThreadName = "DeblockingFilter")
IQ = AppComposer.Thread(ThreadName = "IQ")
IDCT = AppComposer.Thread(ThreadName = "IDCT")
Predictor = AppComposer.Thread(ThreadName = "Predictor")

# Add Threads to Applications
H264.addThread(VideoIn)
H264.addThread(YUVGenerator)
H264.addThread(ChromaResampler)
H264.addThread(MVPadding)
H264.addThread(MotionEstimation)
H264.addThread(MotionCompensation)
H264.addThread(EntropyEncoder)
H264.addThread(DCT)
H264.addThread(SampleHold)
H264.addThread(StreamOut)
H264.addThread(Quantization)
H264.addThread(DeblockingFilter)
H264.addThread(IQ)
H264.addThread(IDCT)
H264.addThread(Predictor)

# Add Flows to Threads (Bandwidth must be in Megabytes/second)
VideoIn.addFlow(AppComposer.Flow(TargetThread = YUVGenerator, Bandwidth = 180))
YUVGenerator.addFlow(AppComposer.Flow(TargetThread = MVPadding, Bandwidth = 60))
YUVGenerator.addFlow(AppComposer.Flow(TargetThread = MotionEstimation, Bandwidth = 60))
YUVGenerator.addFlow(AppComposer.Flow(TargetThread = MotionCompensation, Bandwidth = 60))
YUVGenerator.addFlow(AppComposer.Flow(TargetThread = ChromaResampler, Bandwidth = 120))
ChromaResampler.addFlow(AppComposer.Flow(TargetThread = MotionCompensation, Bandwidth = 30))
MVPadding.addFlow(AppComposer.Flow(TargetThread = MotionEstimation, Bandwidth = 42.85))
MotionEstimation.addFlow(AppComposer.Flow(TargetThread = MotionCompensation, Bandwidth = 0.64))
MotionEstimation.addFlow(AppComposer.Flow(TargetThread = EntropyEncoder, Bandwidth = 0.64))
MotionCompensation.addFlow(AppComposer.Flow(TargetThread = DCT, Bandwidth = 90))
MotionCompensation.addFlow(AppComposer.Flow(TargetThread = Predictor, Bandwidth = 90))
EntropyEncoder.addFlow(AppComposer.Flow(TargetThread = StreamOut, Bandwidth = 12.86))
DCT.addFlow(AppComposer.Flow(TargetThread = Quantization, Bandwidth = 45))
SampleHold.addFlow(AppComposer.Flow(TargetThread = MotionCompensation, Bandwidth = 48.66))
Quantization.addFlow(AppComposer.Flow(TargetThread = EntropyEncoder, Bandwidth = 14.14))
Quantization.addFlow(AppComposer.Flow(TargetThread = IQ, Bandwidth = 14.14))
DeblockingFilter.addFlow(AppComposer.Flow(TargetThread = SampleHold, Bandwidth = 48.66))
IQ.addFlow(AppComposer.Flow(TargetThread = IDCT, Bandwidth = 5.14))
IDCT.addFlow(AppComposer.Flow(TargetThread = Predictor, Bandwidth = 5.14))
Predictor.addFlow(AppComposer.Flow(TargetThread = DeblockingFilter, Bandwidth = 47.36))

# Save App to JSON
H264.toJSON(SaveToFile = True, FileName = "H264_30")